generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id
  first_name    String?
  last_name     String?
  image_url     String?
  banner_id     String?
  banner_url    String?
  username      String?   @unique
  email_address String?   @unique
  posts         Post[]
  Like          Like[]
  Comment       Comment[]
  Followers     Follow[] @relation("Following")
  Following     Follow[] @relation("Follower")

  chatParticipants ChatParticipant[]
  sentMessages     Message[] @relation("MessageSender")
}

model Post {
  id        Int       @id @default(autoincrement())
  postText  String?
  media     String?
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  cld_id    String?
  createdAt DateTime  @default(now())
  likes     Like[]
  comments  Comment[]
  trends    Trend[] //these three being array represent one to many relationship
}

model Like {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  createdAt DateTime @default(now())
}

model Comment {
  id        Int      @id @default(autoincrement())
  comment   String?
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  createdAt DateTime @default(now())
}

model Trend {
  id     Int     @id @default(autoincrement())
  name   String?
  post   Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
}

model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
  createdAt   DateTime @default(now())
}


model Chat {
  id           String             @id @default(cuid())
  participants ChatParticipant[]
  messages     Message[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model ChatParticipant {
  id      String   @id @default(cuid())
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  chat    Chat     @relation(fields: [chatId], references: [id])
  chatId  String
}

model Message {
  id         String   @id 
  chat       Chat     @relation(fields: [chatId], references: [id])
  chatId     String
  sender     User     @relation("MessageSender", fields: [senderId], references: [id])
  senderId   String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  replyTo   Message? @relation("ReplyTo", fields: [replyToId], references: [id])
  replyToId String?  

  repliedBy Message[] @relation("ReplyTo") 
}

model Seen {
  seenId   String   @id @default(cuid())  // ✅ Unique ID for each record
  id       String                          // Message/Post/Notification ID
  type     SeenType
  seenBy   String
  seenAt   DateTime @default(now())

  @@unique([id, type, seenBy], name: "id_type_seenBy")// ✅ Enforce uniqueness manually
         
}

enum SeenType {
  POST
  MESSAGE
  NOTIFICATION
}


